// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wynn_item.sql

package db

import (
	"context"
)

const alreadyVoted = `-- name: AlreadyVoted :one
SELECT SurveyId FROM WG_VoteEntries WHERE SurveyId = ? AND UserId = ?
`

type AlreadyVotedParams struct {
	Surveyid string `json:"surveyid"`
	Userid   string `json:"userid"`
}

func (q *Queries) AlreadyVoted(ctx context.Context, arg AlreadyVotedParams) (string, error) {
	row := q.db.QueryRowContext(ctx, alreadyVoted, arg.Surveyid, arg.Userid)
	var surveyid string
	err := row.Scan(&surveyid)
	return surveyid, err
}

const clearWynnItemStats = `-- name: ClearWynnItemStats :exec
DELETE FROM WG_WynnItemStats
`

func (q *Queries) ClearWynnItemStats(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearWynnItemStats)
	return err
}

const clearWynnItemsTable = `-- name: ClearWynnItemsTable :exec
DELETE FROM WG_WynnItems
`

func (q *Queries) ClearWynnItemsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearWynnItemsTable)
	return err
}

const createWynnItem = `-- name: CreateWynnItem :exec
INSERT INTO WG_WynnItems(Name, Sprite, ReqLevel, ReqStrenght, ReqAgility, ReqDefence, ReqIntelligence, ReqDexterity) VALUES (?,?,?,?,?,?,?,?)
`

type CreateWynnItemParams struct {
	Name            string `json:"name"`
	Sprite          string `json:"sprite"`
	Reqlevel        int32  `json:"reqlevel"`
	Reqstrenght     int32  `json:"reqstrenght"`
	Reqagility      int32  `json:"reqagility"`
	Reqdefence      int32  `json:"reqdefence"`
	Reqintelligence int32  `json:"reqintelligence"`
	Reqdexterity    int32  `json:"reqdexterity"`
}

func (q *Queries) CreateWynnItem(ctx context.Context, arg CreateWynnItemParams) error {
	_, err := q.db.ExecContext(ctx, createWynnItem,
		arg.Name,
		arg.Sprite,
		arg.Reqlevel,
		arg.Reqstrenght,
		arg.Reqagility,
		arg.Reqdefence,
		arg.Reqintelligence,
		arg.Reqdexterity,
	)
	return err
}

const createWynnItemStat = `-- name: CreateWynnItemStat :exec
INSERT INTO WG_WynnItemStats (ItemName, StatId, Lower, Upper) VALUES (?,?,?,?)
`

type CreateWynnItemStatParams struct {
	Itemname string `json:"itemname"`
	Statid   string `json:"statid"`
	Lower    int32  `json:"lower"`
	Upper    int32  `json:"upper"`
}

func (q *Queries) CreateWynnItemStat(ctx context.Context, arg CreateWynnItemStatParams) error {
	_, err := q.db.ExecContext(ctx, createWynnItemStat,
		arg.Itemname,
		arg.Statid,
		arg.Lower,
		arg.Upper,
	)
	return err
}

const findWynnItem = `-- name: FindWynnItem :one
SELECT name, sprite, reqlevel, reqstrenght, reqagility, reqdefence, reqintelligence, reqdexterity FROM WG_WynnItems WHERE Name = ?
`

func (q *Queries) FindWynnItem(ctx context.Context, name string) (WgWynnitem, error) {
	row := q.db.QueryRowContext(ctx, findWynnItem, name)
	var i WgWynnitem
	err := row.Scan(
		&i.Name,
		&i.Sprite,
		&i.Reqlevel,
		&i.Reqstrenght,
		&i.Reqagility,
		&i.Reqdefence,
		&i.Reqintelligence,
		&i.Reqdexterity,
	)
	return i, err
}

const findWynnItemStats = `-- name: FindWynnItemStats :many
SELECT itemname, statid, lower, upper FROM WG_WynnItemStats WHERE ItemName = ?
`

func (q *Queries) FindWynnItemStats(ctx context.Context, itemname string) ([]WgWynnitemstat, error) {
	rows, err := q.db.QueryContext(ctx, findWynnItemStats, itemname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WgWynnitemstat
	for rows.Next() {
		var i WgWynnitemstat
		if err := rows.Scan(
			&i.Itemname,
			&i.Statid,
			&i.Lower,
			&i.Upper,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasOpenVote = `-- name: HasOpenVote :one
SELECT SurveyId, Token FROM WG_Votes WHERE SurveyId = ? AND UserId = ?
`

type HasOpenVoteParams struct {
	Surveyid string `json:"surveyid"`
	Userid   string `json:"userid"`
}

type HasOpenVoteRow struct {
	Surveyid string `json:"surveyid"`
	Token    string `json:"token"`
}

func (q *Queries) HasOpenVote(ctx context.Context, arg HasOpenVoteParams) (HasOpenVoteRow, error) {
	row := q.db.QueryRowContext(ctx, hasOpenVote, arg.Surveyid, arg.Userid)
	var i HasOpenVoteRow
	err := row.Scan(&i.Surveyid, &i.Token)
	return i, err
}

const isContabilized = `-- name: IsContabilized :one
SELECT messageid, userid, surveyid, token, status, votedat FROM WG_Votes WHERE UserId = ? AND SurveyId = ? AND Status = 1
`

type IsContabilizedParams struct {
	Userid   string `json:"userid"`
	Surveyid string `json:"surveyid"`
}

func (q *Queries) IsContabilized(ctx context.Context, arg IsContabilizedParams) (WgVote, error) {
	row := q.db.QueryRowContext(ctx, isContabilized, arg.Userid, arg.Surveyid)
	var i WgVote
	err := row.Scan(
		&i.Messageid,
		&i.Userid,
		&i.Surveyid,
		&i.Token,
		&i.Status,
		&i.Votedat,
	)
	return i, err
}
